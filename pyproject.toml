[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "uncms"
version = "0.0.11"
authors = [
    { name="Lewis Collard", email="lewiscollard@gmail.com" },
]
readme = "README.md"
description = "A CMS toolkit for Django emphasising simplicity, speed, and familiarity."
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Django :: 4.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
]

dependencies = [
    "Pillow",
    "sorl-thumbnail",
    "beautifulsoup4",
    "bleach>=5.0.1,<6",
    "django>=4.2,<4.3",
    "django-watson",
    "django-reversion",
    "python-magic>=0.4.15",
]

[project.optional-dependencies]
dev = [
    "black==23.12.1",
    "build==0.9.0",
    "flake8==6.0.0",
    "factory-boy==3.2.1",
    "isort==5.13.2",
    "Jinja2==3.1.3",
    "psycopg2",
    "pylint==3.0.3",
    "pytest==7.2.0",
    "pytest-cov",
    "pytest-django==4.5.2",
    "twine==4.0.2",
]

jinja2 = [
    "Jinja2>=3.1.2,<4",
]

testhelpers = [
    "factory-boy==3.2.1",
]

[project.urls]
"homepage" = "https://uncms.dev/"
"documentation" = "https://docs.uncms.dev/"
"repository" = "https://github.com/uncms-dev/uncms"

[tool.coverage.run]
omit = ["*/migrations/*"]

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
addopts = ["--create-db", "--no-migrations"]
# Turn warnings into errors
filterwarnings = [
    "error",
    # except this one from deep within Sorl :(
    "ignore:unclosed file:ResourceWarning",
]

[tool.pylint.main]
load-plugins = ["pylint.extensions.bad_builtin"]
persistent = false
jobs = 0
score = false

[tool.pylint."messages control"]
disable = [
  # You'll have a hard time making Django things with these enabled.
  "invalid-name",
  "unused-argument",
  # Let Black decide about code formatting.
  "line-too-long",
  # These options more often than not just force people to write docstrings
  # for the sake of writing docstrings. Write them when they are necessary.
  # Don't write them when it's self-explanatory.
  "missing-module-docstring",
  "missing-function-docstring",
  "missing-class-docstring",
  # "Class 'Page' has no 'id' member" * math.inf
  "no-member",
  # Use of _meta, _base_manager, etc is common in Django code.
  "protected-access",
  # This has too many false positives on migrations & such.
  "duplicate-code",
  # The following are annoying and arbitrary.
  "too-many-arguments",
  "too-many-ancestors",
  "too-many-instance-attributes",
  "too-few-public-methods",
  "too-many-public-methods",
  "too-many-branches",
  "too-many-locals",
  # probably a valid warning, but
  "consider-using-f-string",
  # pylint cannot see through model fields (it would be nice to use
  # pylint-django but it fails at linting Python *packages* which do not have
  # settings modules)
  "invalid-str-returned",
]
enable = ["useless-suppression"]

[tool.pylint.typecheck]
ignore-mixin-members = true
generated-members = ["objects"]

[tool.pylint.basic]
bad-functions = ["map", "filter", "apply", "input", "print"]
